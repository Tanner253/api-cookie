// <auto-generated />
using System;
using Api.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250531173221_CaptureAge")]
    partial class CaptureAge
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Data.Models.Achievement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Condition")
                        .HasColumnType("text");

                    b.Property<string>("ConditionJson")
                        .HasColumnType("jsonb");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("IconAssetName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RewardAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("RewardType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ConditionJson = "{\"stat\":\"Total Clicks\",\"op\":\">=\",\"value\":1}",
                            Description = "You made your first click!",
                            IconAssetName = "ach_click1",
                            Name = "First Click",
                            RewardAmount = 0L,
                            RewardType = "None"
                        },
                        new
                        {
                            Id = 2L,
                            ConditionJson = "{\"stat\":\"Total Score Earned\",\"op\":\">=\",\"value\":1000}",
                            Description = "Reached 1000 score.",
                            IconAssetName = "ach_score1",
                            Name = "Score!",
                            RewardAmount = 1L,
                            RewardType = "GoldBars"
                        },
                        new
                        {
                            Id = 3L,
                            ConditionJson = "{\"upgradeTypeLevel\":\"Production\",\"op\":\">=\",\"value\":1}",
                            Description = "Bought your first production building.",
                            IconAssetName = "ach_prod1",
                            Name = "Producer",
                            RewardAmount = 0L,
                            RewardType = "None"
                        },
                        new
                        {
                            Id = 4L,
                            ConditionJson = "{\"stat\":\"Total Prestige Count\",\"op\":\">=\",\"value\":1}",
                            Description = "Prestiged for the first time.",
                            IconAssetName = "ach_prestige1",
                            Name = "Prestigious",
                            RewardAmount = 5L,
                            RewardType = "GoldBars"
                        });
                });

            modelBuilder.Entity("Api.Data.Models.AdMobSsvTransaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("AdCompletionTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("RewardAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("RewardItem")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("TransactionId");

                    b.HasIndex("PlayerId");

                    b.ToTable("AdMobSsvTransactions");
                });

            modelBuilder.Entity("Api.Data.Models.AgeVerificationStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("AgeVerificationStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateModified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "User has not verified their age.",
                            Status = "Not Verified"
                        },
                        new
                        {
                            Id = 2L,
                            DateModified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "User has verified they meet age requirements.",
                            Status = "Verified"
                        },
                        new
                        {
                            Id = 3L,
                            DateModified = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "User age verification is pending.",
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("Api.Data.Models.ChatMessage", b =>
                {
                    b.Property<long>("ChatMessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ChatMessageID"));

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ChatMessageID");

                    b.HasIndex("PlayerId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Api.Data.Models.DailyReward", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("DayNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("RewardAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("RewardType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("DayNumber");

                    b.HasIndex("DayNumber")
                        .IsUnique();

                    b.ToTable("DailyRewards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayNumber = 1,
                            Description = "Day 1 Reward!",
                            RewardAmount = 100L,
                            RewardType = "Score"
                        },
                        new
                        {
                            Id = 2,
                            DayNumber = 2,
                            Description = "Day 2 Reward!",
                            RewardAmount = 500L,
                            RewardType = "Score"
                        },
                        new
                        {
                            Id = 3,
                            DayNumber = 3,
                            Description = "Day 3 Reward!",
                            RewardAmount = 1L,
                            RewardType = "GoldBars"
                        },
                        new
                        {
                            Id = 4,
                            DayNumber = 4,
                            Description = "Day 4 Reward!",
                            RewardAmount = 2500L,
                            RewardType = "Score"
                        },
                        new
                        {
                            Id = 5,
                            DayNumber = 5,
                            Description = "Day 5 Reward!",
                            RewardAmount = 10000L,
                            RewardType = "Score"
                        },
                        new
                        {
                            Id = 6,
                            DayNumber = 6,
                            Description = "Day 6 Reward!",
                            RewardAmount = 3L,
                            RewardType = "GoldBars"
                        },
                        new
                        {
                            Id = 7,
                            DayNumber = 7,
                            Description = "Day 7 Reward! HUGE BONUS!",
                            RewardAmount = 5L,
                            RewardType = "GoldBars"
                        });
                });

            modelBuilder.Entity("Api.Data.Models.Leaderboard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResetFrequency")
                        .HasColumnType("text");

                    b.Property<string>("SortOrder")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Leaderboards");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "All-time highest score achieved.",
                            Name = "Total Score",
                            ResetFrequency = "Never",
                            SortOrder = "DESC"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Most clicks in the current week.",
                            Name = "Clicks This Week",
                            ResetFrequency = "Weekly",
                            SortOrder = "DESC"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Highest prestige level reached.",
                            Name = "Prestige Count",
                            ResetFrequency = "Never",
                            SortOrder = "DESC"
                        });
                });

            modelBuilder.Entity("Api.Data.Models.LeaderboardEntry", b =>
                {
                    b.Property<long>("LeaderboardId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<long>("Score")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LeaderboardId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("LeaderboardEntries");
                });

            modelBuilder.Entity("Api.Data.Models.MinterInstance", b =>
                {
                    b.Property<long>("MinterInstanceEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MinterInstanceEntityId"));

                    b.Property<int>("ClientInstanceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUnlocked")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastCycleStartTimeUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PlayerMemeMintPlayerDataId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<float>("TimeRemainingSeconds")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MinterInstanceEntityId");

                    b.HasIndex("PlayerMemeMintPlayerDataId", "ClientInstanceId")
                        .IsUnique();

                    b.ToTable("MinterInstances");
                });

            modelBuilder.Entity("Api.Data.Models.MutedPlayer", b =>
                {
                    b.Property<long>("MuterPlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("MutedPlayerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("MutedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MuterPlayerId", "MutedPlayerId");

                    b.HasIndex("MutedPlayerId");

                    b.ToTable("MutedPlayers");
                });

            modelBuilder.Entity("Api.Data.Models.Player", b =>
                {
                    b.Property<long>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PlayerId"));

                    b.Property<string>("ChatDeviceId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirebaseUid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PlayerId");

                    b.HasIndex("DeviceId")
                        .IsUnique();

                    b.HasIndex("FirebaseUid")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerAchievement", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("AchievementId")
                        .HasColumnType("bigint");

                    b.Property<bool>("RewardClaimed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PlayerId", "AchievementId");

                    b.HasIndex("AchievementId");

                    b.ToTable("PlayerAchievements");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerAgeVerification", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("AgeVerificationStatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastVerificationAttempt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VerificationAttemptCount")
                        .HasColumnType("integer");

                    b.Property<string>("VerificationMethod")
                        .HasColumnType("text");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PlayerId");

                    b.HasIndex("AgeVerificationStatusId");

                    b.ToTable("PlayerAgeVerifications");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerChatInfo", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<string>("ChatUsername")
                        .HasColumnType("text");

                    b.Property<bool>("IsAgeVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerChatInfos");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerDailyReward", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("DailyRewardId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ClaimedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("integer");

                    b.Property<int>("MaxStreak")
                        .HasColumnType("integer");

                    b.HasKey("PlayerId", "DailyRewardId");

                    b.HasIndex("DailyRewardId");

                    b.ToTable("PlayerDailyRewards");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerFriend", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("FriendPlayerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FriendshipDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PlayerFriendStatusId")
                        .HasColumnType("bigint");

                    b.HasKey("PlayerId", "FriendPlayerId");

                    b.HasIndex("FriendPlayerId");

                    b.HasIndex("PlayerFriendStatusId");

                    b.ToTable("PlayerFriends");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerFriendStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PlayerFriendStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Accepted"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Declined"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Blocked"
                        });
                });

            modelBuilder.Entity("Api.Data.Models.PlayerMemeMintPlayerData", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PlayerGCMPMPoints")
                        .HasColumnType("decimal(28, 8)");

                    b.Property<int>("SharedMintProgress")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerMemeMintDatas");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerSettings", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<double>("MusicVolume")
                        .HasColumnType("double precision");

                    b.Property<bool>("NotificationsEnabled")
                        .HasColumnType("boolean");

                    b.Property<double>("SfxVolume")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerSettings");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerState", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrentScore")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GoldBars")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastSaveTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("MaxOfflineStorageHours")
                        .HasColumnType("bigint");

                    b.Property<long>("PrestigeCount")
                        .HasColumnType("bigint");

                    b.Property<double>("StoredOfflineTimeSeconds")
                        .HasColumnType("double precision");

                    b.Property<double>("TimePerClickSecond")
                        .HasColumnType("double precision");

                    b.Property<string>("TotalLifeTimeScoreEarned")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerStates");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerStatistic", b =>
                {
                    b.Property<long>("StatisticId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("StatisticId"));

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("NumericValue")
                        .HasColumnType("double precision");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatisticDefinitionId")
                        .HasColumnType("bigint");

                    b.HasKey("StatisticId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("StatisticDefinitionId");

                    b.ToTable("PlayerStatistics");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerUpgrade", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpgradeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastLeveledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PlayerId", "UpgradeId");

                    b.HasIndex("UpgradeId");

                    b.ToTable("PlayerUpgrades");
                });

            modelBuilder.Entity("Api.Data.Models.Statistic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StatType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Statistics");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Total number of times the player has clicked.",
                            Name = "Total Clicks",
                            StatType = "Counter"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Total score earned across all sessions.",
                            Name = "Total Score Earned",
                            StatType = "Counter"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Total number of times the player has prestiged.",
                            Name = "Total Prestige Count",
                            StatType = "Counter"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Current amount of prestige currency held.",
                            Name = "Current Gold Bars",
                            StatType = "Value"
                        });
                });

            modelBuilder.Entity("Api.Data.Models.Upgrade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BaseCost")
                        .HasColumnType("bigint");

                    b.Property<double>("BaseEffectValue")
                        .HasColumnType("double precision");

                    b.Property<decimal>("CostScalingFactor")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double>("EffectScalingFactor")
                        .HasColumnType("double precision");

                    b.Property<string>("IconAssetName")
                        .HasColumnType("text");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UnlockRequirementsJson")
                        .HasColumnType("jsonb");

                    b.Property<long>("UpgradeTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UpgradeTypeId");

                    b.ToTable("Upgrades");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BaseCost = 10L,
                            BaseEffectValue = 0.10000000000000001,
                            CostScalingFactor = 1.07m,
                            Description = "Adds +0.1 score per click per level.",
                            EffectScalingFactor = 1.0,
                            IsUnique = false,
                            MaxLevel = 0,
                            Name = "Basic Click Upgrade",
                            UpgradeTypeId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            BaseCost = 25L,
                            BaseEffectValue = 0.5,
                            CostScalingFactor = 1.08m,
                            Description = "Adds +0.5 score per click per level.",
                            EffectScalingFactor = 1.0,
                            IsUnique = false,
                            MaxLevel = 0,
                            Name = "Iron Click Upgrade",
                            UpgradeTypeId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            BaseCost = 75L,
                            BaseEffectValue = 1.5,
                            CostScalingFactor = 1.1m,
                            Description = "Adds +1.5 score per click per level.",
                            EffectScalingFactor = 1.0,
                            IsUnique = false,
                            MaxLevel = 0,
                            Name = "Copper Click Upgrade",
                            UpgradeTypeId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            BaseCost = 100L,
                            BaseEffectValue = 2.0,
                            CostScalingFactor = 1.12m,
                            Description = "Adds +2 score per click per level.",
                            EffectScalingFactor = 1.0,
                            IsUnique = false,
                            MaxLevel = 0,
                            Name = "Silver Click Upgrade",
                            UpgradeTypeId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            BaseCost = 250L,
                            BaseEffectValue = 5.0,
                            CostScalingFactor = 1.14m,
                            Description = "Adds +5 score per click per level.",
                            EffectScalingFactor = 1.0,
                            IsUnique = false,
                            MaxLevel = 0,
                            Name = "Gold Click Upgrade",
                            UpgradeTypeId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            BaseCost = 500L,
                            BaseEffectValue = 10.0,
                            CostScalingFactor = 1.2m,
                            Description = "Adds +10 score per click per level.",
                            EffectScalingFactor = 1.0,
                            IsUnique = false,
                            MaxLevel = 0,
                            Name = "Diamond Click Upgrade",
                            UpgradeTypeId = 1L
                        },
                        new
                        {
                            Id = 101L,
                            BaseCost = 10L,
                            BaseEffectValue = 1.0,
                            CostScalingFactor = 1.15m,
                            Description = "Generates +1.0 score/sec per level.",
                            EffectScalingFactor = 1.0,
                            IsUnique = false,
                            MaxLevel = 0,
                            Name = "Auto-Clicker",
                            UpgradeTypeId = 2L
                        },
                        new
                        {
                            Id = 102L,
                            BaseCost = 50L,
                            BaseEffectValue = 3.3333333333333335,
                            CostScalingFactor = 1.2m,
                            Description = "Generates +3.33 score/sec per level.",
                            EffectScalingFactor = 1.0,
                            IsUnique = false,
                            MaxLevel = 0,
                            Name = "Click Farm",
                            UpgradeTypeId = 2L
                        },
                        new
                        {
                            Id = 103L,
                            BaseCost = 200L,
                            BaseEffectValue = 7.5,
                            CostScalingFactor = 1.25m,
                            Description = "Generates +7.5 score/sec per level.",
                            EffectScalingFactor = 1.0,
                            IsUnique = false,
                            MaxLevel = 0,
                            Name = "Click Factory",
                            UpgradeTypeId = 2L
                        },
                        new
                        {
                            Id = 104L,
                            BaseCost = 600L,
                            BaseEffectValue = 16.0,
                            CostScalingFactor = 1.3m,
                            Description = "Generates +16.0 score/sec per level.",
                            EffectScalingFactor = 1.0,
                            IsUnique = false,
                            MaxLevel = 0,
                            Name = "Click MegaCorp",
                            UpgradeTypeId = 2L
                        },
                        new
                        {
                            Id = 105L,
                            BaseCost = 1500L,
                            BaseEffectValue = 33.333333333333336,
                            CostScalingFactor = 1.35m,
                            Description = "Generates +33.33 score/sec per level.",
                            EffectScalingFactor = 1.0,
                            IsUnique = false,
                            MaxLevel = 0,
                            Name = "Click Enterprise",
                            UpgradeTypeId = 2L
                        },
                        new
                        {
                            Id = 106L,
                            BaseCost = 5000L,
                            BaseEffectValue = 71.428571428571431,
                            CostScalingFactor = 1.4m,
                            Description = "Generates +71.43 score/sec per level.",
                            EffectScalingFactor = 1.0,
                            IsUnique = false,
                            MaxLevel = 0,
                            Name = "Click Conglomerate",
                            UpgradeTypeId = 2L
                        },
                        new
                        {
                            Id = 107L,
                            BaseCost = 10000L,
                            BaseEffectValue = 150.0,
                            CostScalingFactor = 1.45m,
                            Description = "Generates +150.0 score/sec per level.",
                            EffectScalingFactor = 1.0,
                            IsUnique = false,
                            MaxLevel = 0,
                            Name = "Click Syndicate",
                            UpgradeTypeId = 2L
                        },
                        new
                        {
                            Id = 108L,
                            BaseCost = 25000L,
                            BaseEffectValue = 333.33333333333331,
                            CostScalingFactor = 1.5m,
                            Description = "Generates +333.33 score/sec per level.",
                            EffectScalingFactor = 1.0,
                            IsUnique = false,
                            MaxLevel = 0,
                            Name = "Click Collective",
                            UpgradeTypeId = 2L
                        },
                        new
                        {
                            Id = 109L,
                            BaseCost = 60000L,
                            BaseEffectValue = 800.0,
                            CostScalingFactor = 1.55m,
                            Description = "Generates +800.0 score/sec per level.",
                            EffectScalingFactor = 1.0,
                            IsUnique = false,
                            MaxLevel = 0,
                            Name = "Click Singularity",
                            UpgradeTypeId = 2L
                        },
                        new
                        {
                            Id = 110L,
                            BaseCost = 150000L,
                            BaseEffectValue = 1666.6666666666667,
                            CostScalingFactor = 1.6m,
                            Description = "Generates +1666.67 score/sec per level.",
                            EffectScalingFactor = 1.0,
                            IsUnique = false,
                            MaxLevel = 0,
                            Name = "Click Deity",
                            UpgradeTypeId = 2L
                        },
                        new
                        {
                            Id = 201L,
                            BaseCost = 1000L,
                            BaseEffectValue = 0.0,
                            CostScalingFactor = 2.0m,
                            Description = "Catch lemons to gain 10 minutes worth of production, instantly!",
                            EffectScalingFactor = 1.0,
                            IsUnique = true,
                            MaxLevel = 1,
                            Name = "Lemon",
                            UpgradeTypeId = 3L
                        },
                        new
                        {
                            Id = 202L,
                            BaseCost = 1000L,
                            BaseEffectValue = 2.0,
                            CostScalingFactor = 1.5m,
                            Description = "Lemons don't spoil as fast (+2s per level).",
                            EffectScalingFactor = 1.0,
                            IsUnique = false,
                            MaxLevel = 0,
                            Name = "Lemon Lifespan",
                            UpgradeTypeId = 3L
                        },
                        new
                        {
                            Id = 203L,
                            BaseCost = 1000L,
                            BaseEffectValue = -5.0,
                            CostScalingFactor = 2.1m,
                            Description = "Lemons spawn faster (-5s avg time per level?).",
                            EffectScalingFactor = 1.0,
                            IsUnique = false,
                            MaxLevel = 0,
                            Name = "Lemon Spawn Rate",
                            UpgradeTypeId = 3L
                        },
                        new
                        {
                            Id = 204L,
                            BaseCost = 1000L,
                            BaseEffectValue = 1.0,
                            CostScalingFactor = 2.5m,
                            Description = "Increases the value of lemons (+1 prod minutes per level).",
                            EffectScalingFactor = 1.0,
                            IsUnique = false,
                            MaxLevel = 0,
                            Name = "Lemon Value",
                            UpgradeTypeId = 3L
                        },
                        new
                        {
                            Id = 205L,
                            BaseCost = 1200L,
                            BaseEffectValue = 0.10000000000000001,
                            CostScalingFactor = 4.0m,
                            Description = "Multiply your clicks! (+10% base per level).",
                            EffectScalingFactor = 1.0,
                            IsUnique = false,
                            MaxLevel = 0,
                            Name = "Click Multiplier",
                            UpgradeTypeId = 3L
                        });
                });

            modelBuilder.Entity("Api.Data.Models.UpgradeType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UpgradeTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Upgrades affecting click power.",
                            Name = "Click"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Upgrades affecting automatic production.",
                            Name = "Production"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Special upgrades purchased with prestige currency.",
                            Name = "Prestige"
                        });
                });

            modelBuilder.Entity("Api.Data.Models.AdMobSsvTransaction", b =>
                {
                    b.HasOne("Api.Data.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Api.Data.Models.ChatMessage", b =>
                {
                    b.HasOne("Api.Data.Models.Player", "Player")
                        .WithMany("ChatMessages")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Api.Data.Models.LeaderboardEntry", b =>
                {
                    b.HasOne("Api.Data.Models.Leaderboard", "Leaderboard")
                        .WithMany("LeaderboardEntries")
                        .HasForeignKey("LeaderboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.Player", "Player")
                        .WithMany("LeaderboardEntries")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leaderboard");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Api.Data.Models.MinterInstance", b =>
                {
                    b.HasOne("Api.Data.Models.PlayerMemeMintPlayerData", "PlayerMemeMintPlayerData")
                        .WithMany("MinterInstances")
                        .HasForeignKey("PlayerMemeMintPlayerDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerMemeMintPlayerData");
                });

            modelBuilder.Entity("Api.Data.Models.MutedPlayer", b =>
                {
                    b.HasOne("Api.Data.Models.Player", "MutedPlayerRelation")
                        .WithMany("MutingPlayers")
                        .HasForeignKey("MutedPlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.Player", "MuterPlayer")
                        .WithMany("MutedByPlayers")
                        .HasForeignKey("MuterPlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MutedPlayerRelation");

                    b.Navigation("MuterPlayer");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerAchievement", b =>
                {
                    b.HasOne("Api.Data.Models.Achievement", "Achievement")
                        .WithMany("PlayerAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.Player", "Player")
                        .WithMany("PlayerAchievements")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerAgeVerification", b =>
                {
                    b.HasOne("Api.Data.Models.AgeVerificationStatus", "AgeVerificationStatus")
                        .WithMany("PlayerAgeVerifications")
                        .HasForeignKey("AgeVerificationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.Player", "Player")
                        .WithOne("PlayerAgeVerification")
                        .HasForeignKey("Api.Data.Models.PlayerAgeVerification", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgeVerificationStatus");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerChatInfo", b =>
                {
                    b.HasOne("Api.Data.Models.Player", "Player")
                        .WithOne("PlayerChatInfo")
                        .HasForeignKey("Api.Data.Models.PlayerChatInfo", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerDailyReward", b =>
                {
                    b.HasOne("Api.Data.Models.DailyReward", "DailyReward")
                        .WithMany("PlayerDailyRewards")
                        .HasForeignKey("DailyRewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.Player", "Player")
                        .WithMany("PlayerDailyRewards")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyReward");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerFriend", b =>
                {
                    b.HasOne("Api.Data.Models.Player", "FriendPlayer")
                        .WithMany("FriendOf")
                        .HasForeignKey("FriendPlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.PlayerFriendStatus", "PlayerFriendStatus")
                        .WithMany("PlayerFriends")
                        .HasForeignKey("PlayerFriendStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.Player", "Player")
                        .WithMany("Friends")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FriendPlayer");

                    b.Navigation("Player");

                    b.Navigation("PlayerFriendStatus");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerMemeMintPlayerData", b =>
                {
                    b.HasOne("Api.Data.Models.Player", "Player")
                        .WithOne("MemeMintPlayerData")
                        .HasForeignKey("Api.Data.Models.PlayerMemeMintPlayerData", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerSettings", b =>
                {
                    b.HasOne("Api.Data.Models.Player", "Player")
                        .WithOne("PlayerSettings")
                        .HasForeignKey("Api.Data.Models.PlayerSettings", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerState", b =>
                {
                    b.HasOne("Api.Data.Models.Player", "Player")
                        .WithOne("PlayerState")
                        .HasForeignKey("Api.Data.Models.PlayerState", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerStatistic", b =>
                {
                    b.HasOne("Api.Data.Models.Player", "Player")
                        .WithMany("PlayerStatistics")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.Statistic", "Statistic")
                        .WithMany("PlayerStatistics")
                        .HasForeignKey("StatisticDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Statistic");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerUpgrade", b =>
                {
                    b.HasOne("Api.Data.Models.Player", "Player")
                        .WithMany("PlayerUpgrades")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Data.Models.Upgrade", "Upgrade")
                        .WithMany("PlayerUpgrades")
                        .HasForeignKey("UpgradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Upgrade");
                });

            modelBuilder.Entity("Api.Data.Models.Upgrade", b =>
                {
                    b.HasOne("Api.Data.Models.UpgradeType", "UpgradeType")
                        .WithMany("Upgrades")
                        .HasForeignKey("UpgradeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UpgradeType");
                });

            modelBuilder.Entity("Api.Data.Models.Achievement", b =>
                {
                    b.Navigation("PlayerAchievements");
                });

            modelBuilder.Entity("Api.Data.Models.AgeVerificationStatus", b =>
                {
                    b.Navigation("PlayerAgeVerifications");
                });

            modelBuilder.Entity("Api.Data.Models.DailyReward", b =>
                {
                    b.Navigation("PlayerDailyRewards");
                });

            modelBuilder.Entity("Api.Data.Models.Leaderboard", b =>
                {
                    b.Navigation("LeaderboardEntries");
                });

            modelBuilder.Entity("Api.Data.Models.Player", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("FriendOf");

                    b.Navigation("Friends");

                    b.Navigation("LeaderboardEntries");

                    b.Navigation("MemeMintPlayerData");

                    b.Navigation("MutedByPlayers");

                    b.Navigation("MutingPlayers");

                    b.Navigation("PlayerAchievements");

                    b.Navigation("PlayerAgeVerification");

                    b.Navigation("PlayerChatInfo");

                    b.Navigation("PlayerDailyRewards");

                    b.Navigation("PlayerSettings");

                    b.Navigation("PlayerState");

                    b.Navigation("PlayerStatistics");

                    b.Navigation("PlayerUpgrades");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerFriendStatus", b =>
                {
                    b.Navigation("PlayerFriends");
                });

            modelBuilder.Entity("Api.Data.Models.PlayerMemeMintPlayerData", b =>
                {
                    b.Navigation("MinterInstances");
                });

            modelBuilder.Entity("Api.Data.Models.Statistic", b =>
                {
                    b.Navigation("PlayerStatistics");
                });

            modelBuilder.Entity("Api.Data.Models.Upgrade", b =>
                {
                    b.Navigation("PlayerUpgrades");
                });

            modelBuilder.Entity("Api.Data.Models.UpgradeType", b =>
                {
                    b.Navigation("Upgrades");
                });
#pragma warning restore 612, 618
        }
    }
}
